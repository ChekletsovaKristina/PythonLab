from pyDatalog import pyDatalog

from datetime import date

from pprint import pprint


# region Блок определения классов
class Service():
    """
    Основой класс
    
    """

    # Абстрактные методы, которые будут переопределены в классах потомках
    def __repr__(self):
        pass
    def __str__(self):
        pass

class Owner(Service, pyDatalog.Mixin):
    """
    Владелец автомобиля, содержит информацию о:
    ФИО, адрессе проживания, номере телефона и электронной почты
    
    """
    
    def __init__(self, fullName="", address="", phoneNum="", email=""):
        super(Owner, self).__init__()
        self.fullName = fullName
        self.address = address
        self.phoneNum = phoneNum
        self.email = email
    # {!r} - внутреннее представление ('test1') {!s} - человеческое представление (test1)
    def __repr__(self):        
        return 'Owner({!r},{!r},{!r},{!r})'.format(
                self.fullName, 
                self.address, 
                self.phoneNum, 
                self.email)
    def __str__(self):
        return """\n ФИО = {},
                Возраст = {},
                Номер телефона = {},
                Е-mail = {}""".format(
                    self.fullName,
                    self.address, 
                    self.phoneNum, 
                    self.email)

class Auto(Service, pyDatalog.Mixin):
    """
    Автомобиль владельца, содержит информацию о:
    модели, годе выпуска, регистрационном номере, 
    заводском номере, объеме двигателя и начальном пробеге
    
    """

    def __init__(self, model="", year="", regNumber="", factoryNumber="", engineVolume="", startMileage=""):
        super(Auto, self).__init__()
        self.model = model
        self.year = year
        self.regNumber = regNumber
        self.factoryNumber = factoryNumber
        self.engineVolume = engineVolume
        self.startMileage = startMileage
    
    def __repr__(self):
        return 'Auto({!r},{!r},{!r},{!r},{!r},{!r})'.format(
                self.model, 
                self.year, 
                self.regNumber, 
                self.factoryNumber, 
                self.engineVolume, 
                self.startMileage)
    def __str__(self):
        return """\n Модель =  {},
                Год выпуска = {},
                Регистрационный номер = {}, 
                Заводской номер = {}, 
                Объем двигателя = {}, 
                Начальный пробег = {}""".format(
                    self.model,
                    self.year, 
                    self.regNumber, 
                    self.factoryNumber, 
                    self.engineVolume, 
                    self.startMileage)

class Work(Service, pyDatalog.Mixin):
    """
    Работы проделанные на тех. осмотре, содержащие информацию о:
    наименовании работы, используемых материалов, мастере, 
    выполнившем работу и стоимость проделанной работы
    
    """
    
    def __init__(self, nameWork="", materials="", master="", price=""):
        super(Work, self).__init__()
        self.nameWork = nameWork
        self.materials = materials
        self.master = master
        self.price = price

    def __repr__(self):
        return 'Work({!r},{!r},{!r},{!r})'.format(
                self.nameWork, 
                self.materials, 
                self.master, 
                self.price)
    def __str__(self):
        return """
                [Наименование работы = {}, 
                Использованные материалы = {}, 
                Проделанные работы = {} 
                Стоимость = {}]""".format(
                                self.nameWork, 
                                self.materials, 
                                self.master, 
                                self.price)

class Record(Service, pyDatalog.Mixin):
    """
    Записи о тех. осмотрах автомобиля, содержащие информацию о:
    дате ТО, текущем пробеге автомобиля, проделанных работах и коментарии о ТО
    
    """

    def __init__(self, date="", millage="", recomendation=""):
        super(Record, self).__init__()
        self.date = date
        self.millage = millage             
        self.recomendation = recomendation

    def __repr__(self):
        return 'Record({!r},{!r},{},{!r})'.format(
                self.date, 
                self.millage, 
                self.recomendation)        
    def __str__(self):
        return """
                Дата = {}, 
                Текущий пробег = {},  
                Коментарий = {}""".format(
                    self.date, 
                    self.millage,
                    self.recomendation )
# endregion

# Через предикаты можно искать количество ТО, суммарную стоимость всех ТО, минимальную стоимость то, количество хозяев у машины, выодить самих хозяев 

pyDatalog.create_terms('X, Y, Z, H, book_contains, work_included, has_car, count_records, works_auto')


def main():
    owner0 = serv_book.Owner(
        "Иванов Иван Иванович", 
        "г.Пермь, ул. Попова, 20", 
        "88888888888", 
        "email@email.com")
    owner1 = serv_book.Owner(
        "Колоколова Лекса Алексеевна", 
        "г.Березники, ул. Мира, 15", 
        "88888888899", 
        "emailmail@email.com")
    owner2 = serv_book.Owner(
        "Сигачева Инесса Павловна", 
        "г.Пермь, ул. Попова, 20", 
        "88888888889", 
        "mail@email.com")
 
    auto0 = serv_book.Auto(
        "Ford Mustang gt500", 
        "2018", 
        "в500ся", 
        "500500", 
        "1.8", 
        "15000")
    auto1 = serv_book.Auto(
        "Ferrari 458 Italia", 
        "2013", 
        "в600ся", 
        "600600", 
        "1.8", 
        "16000")
    auto2 = serv_book.Auto(
        "Ferrari 458 Italia", 
        "2013", 
        "в600ся", 
        "600600", 
        "1.8", 
        "16000")

    work0 = serv_book.Work(
        "Замена масла", 
        "Масло", 
        "Петров Петр Петрович", 
        "150")
    work1 = serv_book.Work(
        "Смена шин", 
        "Зимние шины", 
        "Петров Петр Петрович", 
        "12000")
    work2 = serv_book.Work(
        "Замена передних фар", 
        "Передние фары", 
        "Сидоров Иван Иванович", 
        "2000")
    work3 = serv_book.Work(
        "Замена задних фар", 
        "Задние фары", 
        "Кожевников Виктор Сергеевич ", 
        "2500")

    record0 = serv_book.Record(
        date(2019,8,18), 
        "17500",  
        "Машина в отличном состоянии")
    record1 = serv_book.Record(
        date(2019,8,19), 
        "21000",  
        "Все хорошо")
    record2 = serv_book.Record(
        date(2019,8,15), 
        "25000",  
        "Довольно неплохо")
    

    print('\n--------VVV----- pyDatalog -------VVV------\n')
    
    # Формирование фактов
    + has_car(owner0, auto0)
    + has_car(owner1, auto1)
    + has_car(owner2, auto2)

    + (work_included[work0] == record0)
    + (work_included[work1] == record0)
    + (work_included[work2] == record1)
    + (work_included[work3] == record2)

    + (book_contains[record0] == auto0)
    + (book_contains[record1] == auto0)
    + (book_contains[record2] == auto2)

    # Запросы к данным
    print('\n*********** pyDatalog: получение владельцев и их авто:\n')
    print(has_car(X, Y))
    print('\n*********** pyDatalog: получение всех владельцев у автомобиля auto1:\n')
    print(has_car(X, auto1))
    print('\n*********** pyDatalog: получение списка работ для записи record0:\n')
    print(record0 == work_included[X])
    print('\n*********** pyDatalog: просмотр записей для автомобиля auto0:\n')
    print(auto0 == book_contains[X])
    print('\n*********** pyDatalog: получение владельца с номером 888....\n')
    print(serv_book.Owner.phoneNum[X] == "88888888888") 
    print('\n*********** pyDatalog: получение количества записей для автомобиля auto0:\n')
    (count_records[X] == len_(Y)) <= (book_contains[Y] == X)
    print(count_records[auto0] == Z)
    print('\n*********** pyDatalog: получение полной информации для автомобиля auto0:\n')
    print((book_contains[X] == Y) & (work_included[Z] == X) & (has_car(H,Y)) & (Y == auto0))
    print('\n*********** pyDatalog: получение списка работ  для автомобиля auto0:\n')
    (works_auto[Y] == Z) <= (book_contains[X] == Z) & (work_included[Y] == X)
    print(works_auto[Y] == auto0)

    print('\n-------^^^------ pyDatalog ------^^^-------\n')

if __name__ == "__main__":
    main()
